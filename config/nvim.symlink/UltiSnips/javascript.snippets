snippet c
console.log('DEBUGLOG', ${0:${VISUAL}});
endsnippet

snippet d
app.debug.log(${0:${VISUAL}});
endsnippet

snippet t
// TODO(sedivy): $1
endsnippet

snippet no
// NOCHECKIN(sedivy): $1
endsnippet

snippet note
// NOTE(sedivy): $1
endsnippet

snippet r
import $1 from '${2:$1}';
endsnippet

snippet m
module.exports = $1;
endsnippet

snippet for
for (let i = 0; i < $1; i++) {
	$0
}
endsnippet

snippet fore
for (let i = 0; i < entities.length; i++) {
	let entity = entities[i];
	$0
}
endsnippet

snippet forl
for (let i = 0, len = $1; i < len; i++) {
	$0
}
endsnippet

snippet forr
for (let i = $1.length - 1; i >= 0; i--) {
	$0
}
endsnippet

snippet qu
document.querySelector($1);
endsnippet

snippet qua
document.querySelectorAll($1);
endsnippet

snippet in
$1.prototype = Object.create($2.prototype);
$1.prototype.constructor = $2;
endsnippet

snippet it
it('$1', () => {
	$0
});
endsnippet

snippet de
describe('$1', () => {
	$0
});
endsnippet

snippet a
assert(${1:value}, ${2:message});
endsnippet

snippet ae
assert.equal(${1:actual}, ${2:expected});
endsnippet

snippet rectb
app.video.ctx.fillRect(this.bounds.l, this.bounds.t, this.bounds.width, this.bounds.height);
endsnippet

snippet style
app.video.ctx.fillStyle = $0;
endsnippet

snippet rect
app.video.ctx.fillRect($0);
endsnippet

snippet text
app.video.ctx.fillStyle = 'black';
app.video.ctx.font = '20px sans-serif';
app.video.ctx.textAlign = 'center';
app.video.ctx.textBaseline = 'middle';
app.video.ctx.fillText($1, $2, $3);
endsnippet

snippet react
var React = require('react');

var $1 = React.createClass({
});

module.exports = $1;
endsnippet

snippet time
let start = performance.now();
console.log('DEBUGLOG', '[performance]: "$0"', (performance.now() - start), 'ms');
endsnippet

snippet ftime
let count$1 = 1000;
let start$1 = performance.now();
for (let iterationIndex = 0; iterationIndex < count$1; iterationIndex++) {
	$0
}
console.log('DEBUGLOG', '[performance]: "$1"', (performance.now() - start$1) / count$1, 'ms');
endsnippet

snippet profile
console.profile("$1");
console.profileEnd("$1");
endsnippet

snippet forc
for (let childIndex = 0; childIndex < entity.transform.children.length; childIndex++) {
	let child = entity.transform.children[childIndex].entity;
	if (child) {
		$0
	}
}
endsnippet

snippet foro
for (let entity of entities) {
	$0
}
endsnippet

snippet spy
let $2 = jest.spyOn($1, '$2');
endsnippet
